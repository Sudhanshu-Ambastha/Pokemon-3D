/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 models/opt/regular/1002.glb -o models/gltfjsx/regular/1002.jsx 
*/

import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'

export function Model(props) {
  const { scene } = useGLTF('https://raw.githubusercontent.com/Sudhanshu-Ambastha/Pokemon-3D-api/main/models/opt/regular/1002.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  return (
    <group {...props} dispose={null}>
      <primitive object={nodes.pm1099_00_00} />
      <primitive object={nodes.origin} />
      <primitive object={nodes.lod_group} />
      <group rotation={[Math.PI / 2, 0, 0]}>
        <skinnedMesh geometry={nodes.pm1099_00_00_body_mesh_shape_mesh.geometry} material={materials.body_a_00} skeleton={nodes.pm1099_00_00_body_mesh_shape_mesh.skeleton} />
        <skinnedMesh geometry={nodes.pm1099_00_00_body_mesh_shape_mesh_1.geometry} material={materials.body_a_01} skeleton={nodes.pm1099_00_00_body_mesh_shape_mesh_1.skeleton} />
      </group>
      <group rotation={[Math.PI / 2, 0, 0]}>
        <skinnedMesh geometry={nodes.pm1099_00_00_eye_mesh_shape_mesh.geometry} material={materials.l_eye} skeleton={nodes.pm1099_00_00_eye_mesh_shape_mesh.skeleton} />
        <skinnedMesh geometry={nodes.pm1099_00_00_eye_mesh_shape_mesh_1.geometry} material={materials.l_eye} skeleton={nodes.pm1099_00_00_eye_mesh_shape_mesh_1.skeleton} />
      </group>
      <skinnedMesh geometry={nodes.pm1099_00_00_feeler_a_ice_mesh_shape.geometry} material={materials.body_c} skeleton={nodes.pm1099_00_00_feeler_a_ice_mesh_shape.skeleton} rotation={[Math.PI / 2, 0, 0]} />
      <skinnedMesh geometry={nodes.pm1099_00_00_feeler_a_mesh_shape.geometry} material={materials.body_b} skeleton={nodes.pm1099_00_00_feeler_a_mesh_shape.skeleton} rotation={[Math.PI / 2, 0, 0]} />
      <skinnedMesh geometry={nodes.pm1099_00_00_feeler_b_ice_mesh_shape.geometry} material={materials.body_c} skeleton={nodes.pm1099_00_00_feeler_b_ice_mesh_shape.skeleton} rotation={[Math.PI / 2, 0, 0]} />
      <skinnedMesh geometry={nodes.pm1099_00_00_feeler_b_mesh_shape.geometry} material={materials.body_b} skeleton={nodes.pm1099_00_00_feeler_b_mesh_shape.skeleton} rotation={[Math.PI / 2, 0, 0]} />
      <skinnedMesh geometry={nodes.pm1099_00_00_feeler_c_mesh_shape.geometry} material={materials.body_a_00} skeleton={nodes.pm1099_00_00_feeler_c_mesh_shape.skeleton} rotation={[Math.PI / 2, 0, 0]} />
      <skinnedMesh geometry={nodes.pm1099_00_00_feeler_d_mesh_shape.geometry} material={materials.body_a_00} skeleton={nodes.pm1099_00_00_feeler_d_mesh_shape.skeleton} rotation={[Math.PI / 2, 0, 0]} />
      <skinnedMesh geometry={nodes.pm1099_00_00_feeler_e_mesh_shape.geometry} material={materials.body_a_00} skeleton={nodes.pm1099_00_00_feeler_e_mesh_shape.skeleton} rotation={[Math.PI / 2, 0, 0]} />
      <skinnedMesh geometry={nodes.pm1099_00_00_ice_a_mesh_shape.geometry} material={materials.body_b} skeleton={nodes.pm1099_00_00_ice_a_mesh_shape.skeleton} rotation={[Math.PI / 2, 0, 0]} />
      <skinnedMesh geometry={nodes.pm1099_00_00_ice_b_mesh_shape.geometry} material={materials.body_b} skeleton={nodes.pm1099_00_00_ice_b_mesh_shape.skeleton} rotation={[Math.PI / 2, 0, 0]} />
      <skinnedMesh geometry={nodes.pm1099_00_00_nose_mesh_shape.geometry} material={materials.body_b} skeleton={nodes.pm1099_00_00_nose_mesh_shape.skeleton} rotation={[Math.PI / 2, 0, 0]} />
      <skinnedMesh geometry={nodes.pm1099_00_00_teeth_mesh_shape.geometry} material={materials.body_b} skeleton={nodes.pm1099_00_00_teeth_mesh_shape.skeleton} rotation={[Math.PI / 2, 0, 0]} />
      <skinnedMesh geometry={nodes.pm1099_00_00_whiskers_mesh_shape.geometry} material={materials.body_b} skeleton={nodes.pm1099_00_00_whiskers_mesh_shape.skeleton} rotation={[Math.PI / 2, 0, 0]} />
    </group>
  )
}

useGLTF.preload('https://raw.githubusercontent.com/Sudhanshu-Ambastha/Pokemon-3D-api/main/models/opt/regular/1002.glb')
